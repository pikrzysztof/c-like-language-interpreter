

module Absgramatyka where

-- Haskell module generated by the BNF converter




newtype Ident = Ident String deriving (Eq,Ord,Show,Read)
data CharOrMinus =
   CharM Char
 | MinusM
  deriving (Eq,Ord,Show,Read)

data ComplexCoord =
   ComplexCoordInt Integer
 | ComplexCoordDouble Double
  deriving (Eq,Ord,Show,Read)

data Const =
   CJustConst ComplexCoord
 | CConstComplexPair ComplexCoord ComplexCoord
 | CBoolTrue
 | CBoolFalse
 | CString String
  deriving (Eq,Ord,Show,Read)

data Option =
   JustOption Char [CharOrMinus]
  deriving (Eq,Ord,Show,Read)

data Stmt =
   UnitaryOpInvCall Ident
 | UnitaryOpArgInvCall Ident [Expr]
 | Assignment Ident Expr
 | FanoutSugar Expr FanoutSugarOp Expr
 | ForLoop Ident Expr Expr Block
 | ForStepLoop Ident Expr Expr Expr Block
 | WhileLoop Expr Block
 | UntilLoop Block Expr
 | ConditionalBranch Expr Block
 | ConditionalBranchElse Expr Block Block
 | ReturnExpr Expr
 | InputExpr Expr Ident
 | InputNoExpr Ident
 | Print [Expr]
 | Exit Expr
 | MeasureNoIdent Expr
 | MeasureIdent Expr Ident
 | Reset
 | List [Ident]
 | DumpExpr Expr
 | DumpNoExpr
 | LoadExpr Expr
 | LoadNoExpr
 | SaveExpr Expr
 | SaveNoExpr
 | Shell
 | SetExpr Option Expr
 | SetNoExpr Option
 | StmtSemicolon Stmt
  deriving (Eq,Ord,Show,Read)

data FanoutSugarOp =
   FanoutRight
 | FanoutLeft
 | FanoutSwap
  deriving (Eq,Ord,Show,Read)

data Type =
   TInt
 | TReal
 | TComplex
 | TString
 | TQureg
 | TQuvoid
 | TQuConst
 | TQuscratch
  deriving (Eq,Ord,Show,Read)

data ConstDef =
   JustConstDef Ident Expr
  deriving (Eq,Ord,Show,Read)

data VarDef =
   JustVarDef Type Ident
 | VarDefAss Type Ident Expr
 | VarDefExpr Type Ident Expr
  deriving (Eq,Ord,Show,Read)

data ArgDef =
   JustArgDef Type Ident
  deriving (Eq,Ord,Show,Read)

data ConstOrVar =
   ConstDefList ConstDef
 | VarDefList VarDef
  deriving (Eq,Ord,Show,Read)

data Body =
   JustBody [ConstOrVar] [Stmt]
  deriving (Eq,Ord,Show,Read)

data Def =
   DefConstDef ConstDef
 | VarDefDef VarDef
 | FunDef Type Ident [ArgDef] Body
 | ProcDef Ident [ArgDef] Body
 | OperatorDef Ident [ArgDef] Body
 | QufunctDef Ident [ArgDef] Body
 | ExternOpDef Ident [ArgDef]
 | ExternQufunctDef Ident [ArgDef]
  deriving (Eq,Ord,Show,Read)

data Block =
   JustBlock [Stmt]
  deriving (Eq,Ord,Show,Read)

