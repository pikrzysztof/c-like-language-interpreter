{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}
module Printgramatyka where

-- pretty-printer generated by the BNF converter

import Absgramatyka
import Data.Char


-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : "," :ts -> showString t . space "," . rend i ts
    t  : ")" :ts -> showString t . showChar ')' . rend i ts
    t  : "]" :ts -> showString t . showChar ']' . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else (' ':s))

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc
  prtList :: [a] -> Doc
  prtList = concatD . map (prt 0)

instance Print a => Print [a] where
  prt _ = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id


instance Print Integer where
  prt _ x = doc (shows x)


instance Print Double where
  prt _ x = doc (shows x)


instance Print Ident where
  prt _ (Ident i) = doc (showString ( i))
  prtList es = case es of
   [] -> (concatD [])
   [] -> (concatD [])
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ",") , prt 0 xs])
   x:xs -> (concatD [prt 0 x , prt 0 xs])



instance Print CharOrMinus where
  prt i e = case e of
   CharM c -> prPrec i 0 (concatD [prt 0 c])
   MinusM  -> prPrec i 0 (concatD [doc (showString "-")])

  prtList es = case es of
   [] -> (concatD [])
   [] -> (concatD [])
   x:xs -> (concatD [prt 0 x , prt 0 xs])
   x:xs -> (concatD [prt 0 x , prt 0 xs])

instance Print ComplexCoord where
  prt i e = case e of
   ComplexCoordInt n -> prPrec i 0 (concatD [prt 0 n])
   ComplexCoordDouble d -> prPrec i 0 (concatD [prt 0 d])


instance Print Const where
  prt i e = case e of
   CJustConst complexcoord -> prPrec i 0 (concatD [prt 0 complexcoord])
   CConstComplexPair complexcoord0 complexcoord -> prPrec i 0 (concatD [doc (showString "(") , prt 0 complexcoord0 , doc (showString ",") , prt 0 complexcoord , doc (showString ")")])
   CBoolTrue  -> prPrec i 0 (concatD [doc (showString "true")])
   CBoolFalse  -> prPrec i 0 (concatD [doc (showString "false")])
   CString str -> prPrec i 0 (concatD [prt 0 str])


instance Print Option where
  prt i e = case e of
   JustOption c charorminuss -> prPrec i 0 (concatD [prt 0 c , prt 0 charorminuss])


instance Print Stmt where
  prt i e = case e of
   UnitaryOpInvCall id -> prPrec i 0 (concatD [doc (showString "!") , prt 0 id , doc (showString "(") , doc (showString ")") , doc (showString ";")])
   UnitaryOpArgInvCall id exprs -> prPrec i 0 (concatD [doc (showString "!") , prt 0 id , doc (showString "(") , prt 0 exprs , doc (showString ")") , doc (showString ";")])
   Assignment id expr -> prPrec i 0 (concatD [prt 0 id , doc (showString "=") , prt 0 expr , doc (showString ";")])
   FanoutSugar expr0 fanoutsugarop expr -> prPrec i 0 (concatD [prt 0 expr0 , prt 0 fanoutsugarop , prt 0 expr])
   ForLoop id expr0 expr block -> prPrec i 0 (concatD [doc (showString "for") , prt 0 id , doc (showString "=") , prt 0 expr0 , doc (showString "to") , prt 0 expr , prt 0 block])
   ForStepLoop id expr0 expr1 expr block -> prPrec i 0 (concatD [doc (showString "for") , prt 0 id , doc (showString "=") , prt 0 expr0 , doc (showString "to") , prt 0 expr1 , doc (showString "step") , prt 0 expr , prt 0 block])
   WhileLoop expr block -> prPrec i 0 (concatD [doc (showString "while") , prt 0 expr , prt 0 block])
   UntilLoop block expr -> prPrec i 0 (concatD [prt 0 block , doc (showString "until") , prt 0 expr , doc (showString ";")])
   ConditionalBranch expr block -> prPrec i 0 (concatD [doc (showString "if") , prt 0 expr , prt 0 block])
   ConditionalBranchElse expr block0 block -> prPrec i 0 (concatD [doc (showString "if") , prt 0 expr , prt 0 block0 , doc (showString "else") , prt 0 block])
   ReturnExpr expr -> prPrec i 0 (concatD [doc (showString "return") , prt 0 expr , doc (showString ";")])
   InputExpr expr id -> prPrec i 0 (concatD [doc (showString "input") , prt 0 expr , prt 0 id , doc (showString ";")])
   InputNoExpr id -> prPrec i 0 (concatD [doc (showString "input") , prt 0 id , doc (showString ";")])
   Print exprs -> prPrec i 0 (concatD [doc (showString "print") , prt 0 exprs , doc (showString ";")])
   Exit expr -> prPrec i 0 (concatD [doc (showString "exit") , prt 0 expr , doc (showString ";")])
   MeasureNoIdent expr -> prPrec i 0 (concatD [doc (showString "measure") , prt 0 expr , doc (showString ";")])
   MeasureIdent expr id -> prPrec i 0 (concatD [doc (showString "measure") , prt 0 expr , doc (showString ",") , prt 0 id , doc (showString ";")])
   Reset  -> prPrec i 0 (concatD [doc (showString "reset") , doc (showString ";")])
   List ids -> prPrec i 0 (concatD [doc (showString "list") , prt 0 ids , doc (showString ";")])
   DumpExpr expr -> prPrec i 0 (concatD [doc (showString "dump") , prt 0 expr , doc (showString ";")])
   DumpNoExpr  -> prPrec i 0 (concatD [doc (showString "dump") , doc (showString ";")])
   LoadExpr expr -> prPrec i 0 (concatD [doc (showString "load") , prt 0 expr , doc (showString ";")])
   LoadNoExpr  -> prPrec i 0 (concatD [doc (showString "load") , doc (showString ";")])
   SaveExpr expr -> prPrec i 0 (concatD [doc (showString "save") , prt 0 expr , doc (showString ";")])
   SaveNoExpr  -> prPrec i 0 (concatD [doc (showString "save") , doc (showString ";")])
   Shell  -> prPrec i 0 (concatD [doc (showString "shell") , doc (showString ";")])
   SetExpr option expr -> prPrec i 0 (concatD [doc (showString "set") , prt 0 option , doc (showString ",") , prt 0 expr , doc (showString ";")])
   SetNoExpr option -> prPrec i 0 (concatD [doc (showString "set") , prt 0 option , doc (showString ";")])
   StmtSemicolon stmt -> prPrec i 0 (concatD [prt 0 stmt , doc (showString ";")])

  prtList es = case es of
   [] -> (concatD [])
   [] -> (concatD [])
   x:xs -> (concatD [prt 0 x , prt 0 xs])
   x:xs -> (concatD [prt 0 x , prt 0 xs])

instance Print FanoutSugarOp where
  prt i e = case e of
   FanoutRight  -> prPrec i 0 (concatD [doc (showString "->")])
   FanoutLeft  -> prPrec i 0 (concatD [doc (showString "<-")])
   FanoutSwap  -> prPrec i 0 (concatD [doc (showString "<-")])


instance Print Type where
  prt i e = case e of
   TInt  -> prPrec i 0 (concatD [doc (showString "int")])
   TReal  -> prPrec i 0 (concatD [doc (showString "real")])
   TComplex  -> prPrec i 0 (concatD [doc (showString "complex")])
   TString  -> prPrec i 0 (concatD [doc (showString "string")])
   TQureg  -> prPrec i 0 (concatD [doc (showString "qureg")])
   TQuvoid  -> prPrec i 0 (concatD [doc (showString "quvoid")])
   TQuConst  -> prPrec i 0 (concatD [doc (showString "quConst")])
   TQuscratch  -> prPrec i 0 (concatD [doc (showString "quscratch")])


instance Print ConstDef where
  prt i e = case e of
   JustConstDef id expr -> prPrec i 0 (concatD [doc (showString "Const") , prt 0 id , doc (showString "=") , prt 0 expr , doc (showString ";")])


instance Print VarDef where
  prt i e = case e of
   JustVarDef type' id -> prPrec i 0 (concatD [prt 0 type' , prt 0 id , doc (showString ";")])
   VarDefAss type' id expr -> prPrec i 0 (concatD [prt 0 type' , prt 0 id , doc (showString "=") , prt 0 expr , doc (showString ";")])
   VarDefExpr type' id expr -> prPrec i 0 (concatD [prt 0 type' , prt 0 id , prt 0 expr , doc (showString ";")])


instance Print ArgDef where
  prt i e = case e of
   JustArgDef type' id -> prPrec i 0 (concatD [prt 0 type' , prt 0 id])

  prtList es = case es of
   [] -> (concatD [])
   [] -> (concatD [])
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ",") , prt 0 xs])
   x:xs -> (concatD [prt 0 x , prt 0 xs])

instance Print ConstOrVar where
  prt i e = case e of
   ConstDefList constdef -> prPrec i 0 (concatD [prt 0 constdef])
   VarDefList vardef -> prPrec i 0 (concatD [prt 0 vardef])

  prtList es = case es of
   [] -> (concatD [])
   [] -> (concatD [])
   x:xs -> (concatD [prt 0 x , prt 0 xs])
   x:xs -> (concatD [prt 0 x , prt 0 xs])

instance Print Body where
  prt i e = case e of
   JustBody constorvars stmts -> prPrec i 0 (concatD [doc (showString "{") , prt 0 constorvars , prt 0 stmts , doc (showString "}")])


instance Print Def where
  prt i e = case e of
   DefConstDef constdef -> prPrec i 0 (concatD [prt 0 constdef])
   VarDefDef vardef -> prPrec i 0 (concatD [prt 0 vardef])
   FunDef type' id argdefs body -> prPrec i 0 (concatD [prt 0 type' , prt 0 id , doc (showString "(") , prt 0 argdefs , doc (showString ")") , prt 0 body])
   ProcDef id argdefs body -> prPrec i 0 (concatD [doc (showString "procedure") , prt 0 id , doc (showString "(") , prt 0 argdefs , doc (showString ")") , prt 0 body])
   OperatorDef id argdefs body -> prPrec i 0 (concatD [doc (showString "operator") , prt 0 id , doc (showString "(") , prt 0 argdefs , doc (showString ")") , prt 0 body])
   QufunctDef id argdefs body -> prPrec i 0 (concatD [doc (showString "qufunct") , prt 0 id , doc (showString "(") , prt 0 argdefs , doc (showString ")") , prt 0 body])
   ExternOpDef id argdefs -> prPrec i 0 (concatD [doc (showString "extern") , doc (showString "operator") , prt 0 id , doc (showString "(") , prt 0 argdefs , doc (showString ")") , doc (showString ";")])
   ExternQufunctDef id argdefs -> prPrec i 0 (concatD [doc (showString "extern") , doc (showString "qufunct") , prt 0 id , doc (showString "(") , prt 0 argdefs , doc (showString ")") , doc (showString ";")])


instance Print Block where
  prt i e = case e of
   JustBlock stmts -> prPrec i 0 (concatD [doc (showString "{") , prt 0 stmts , doc (showString "}")])



