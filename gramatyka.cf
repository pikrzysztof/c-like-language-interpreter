-- EXPRESSIONS

CComplexCoord.        complexcoord ::=  [ "+" | "-" ] ( Double | Integer );
CJustConst.           const ::=         ( Double | Integer );
CConstComplexPair.    const ::=         "(" complexcoord "," complexcoord ")";
CBoolTrue.            const ::=         "true";
CBoolFalse.           const ::=         "false";
CString.              const ::=         String;


EFCall.               expr0 ::=         Ident "(" [expr0 {"," expr0}] ")";        -- wywolanie funkcji
ENieWiemJakiesListy   expr0 ::=         Ident "[" [expr0, [tworzenieList expr0]] "]";
EConst.               expr11 ::=        const;
EEq.                  expr0 ::=         expr0 "==" expr1;
ENeq.                 expr0 ::=         expr0 "!=" expr1;
ELe.                  expr1 ::=         expr1 "<" expr2;
ELEq.                 expr1 ::=         expr1 "<=" expr2;
EGr.                  expr1 ::=         expr1 ">" expr2;
EGrEq.                expr1 ::=         expr1 ">=" expr2;
EOr.                  expr2 ::=         expr2 "or" expr3;
EAnd.                 expr3 ::=         expr3 "and" expr4;
EXor.                 expr4 ::=         expr4 "xor" expr5;
ENot.                 expr5 ::=         "not" expr6;
EAdd.                 expr6 ::=         expr6 "+" expr7;
ESubtract.            expr6 ::=         expr6 "-" expr7;
EStringConcat.        expr6 ::=         expr6 "&" expr7;
ETimes.               expr7 ::=         expr7 "*" expr8;
EDiv.                 expr7 ::=         expr7 "/" expr8;
EMod.                 expr7 ::=         expr7 "mod" expr8;
EPow.                 expr8 ::=         expr8 "^" expr9;
EUnaryMinus.          expr9 ::=         "-" expr10;
ESize.                expr10 ::=         "#" expr11;
_.                    expr10 ::=         "(" expr0 ")";

KonkatenacjaList.     tworzenieList ::= ":";
ListaNastepnikow.     tworzenieList ::= "..";



--STATEMENTS
Block.                block    ::=      "{" stmt {stmt} "}";
Option.               option   ::=      Char, {Char | "-"};
FunctionCall.         stmt     ::=      ["!"] Ident "(" [expr {"," expr}] ")" ";"; --! to jest odwrocenie operatora unitarnego, patrz strona 61
Assignment.           stmt     ::=      Ident "=" expr ";";
FanoutSugar.          stmt     ::=      expr fanoutSugarOp expr;
ForLoop               stmt     ::=      "for" Ident "=" expr "to" expr ["step" expr] block;
WhileLoop             stmt     ::=      "while" expr block;
UntilLoop             stmt     ::=      block "until" expr ";";
ConditionalBranch     stmt     ::=      "if" expr block ["else" block];
ReturnExpr            stmt     ::=      "return" expr ";";
Input                 stmt     ::=      "input" [expr] Ident ";";
Print                 stmt     ::=      "print" expr {"," expr} ";";
Exit                  stmt     ::=      "exit" [expr] ";";
Measure               stmt     ::=      "measure" expr ["," Ident] ";";
Reset                 stmt     ::=      "reset" ";";
List                  stmt     ::=      "list" [Ident, {"," Ident}] ";";
Dump                  stmt     ::=      "dump" [expr] ";";
Load                  stmt     ::=      "load" [expr] ";";
Save                  stmt     ::=      "save" [expr] ";";
Shell                 stmt     ::=      "shell" ";";
Set                   stmt     ::=      "set" option ["," expr] ";";
Stmt                  stmt     ::=      stmt ";";

FanoutRight           fanoutSugarOp ::= "->";              --strona 68
FanoutLeft            fanoutSugarOp ::= "<-";
FanoutSwap            fanoutSugarOp ::= "<-";

-- DEFINITIONS

TInt                  type     ::= "int";
TReal                 type     ::= "real";
TComplex              type     ::= "complex";
TString               type     ::= "string";
TQureg                type     ::= "qureg";
TQuvoid               type     ::= "quvoid";
TQuconst              type     ::= "quconst";
TQuscratch            type     ::= "quscratch";

ConstDef              constdef ::= "const" Ident "=" expr ";";

VarDef                vardef   ::= type Ident ";";
VarDefAss             vardef   ::= type Ident "=" expr ";";
VarDefExpr            vardef   ::= type Ident expr ";";
ArgDef                argdef   ::= type Ident;
ArgList               arglist  ::= "(" [argdef {"," argdef}] ")";
Body                  body     ::= "{" {constdef | vardef} {stmt} "}";
ConstDef              def      ::= constdef;
VarDef                def      ::= vardef;
FunDef                def      ::= type Ident arglist body;
ProcDef               def      ::= "procedure" Ident arglist body;
OperatorDef           def      ::= "operator" Ident arglist body;
QufunctDef            def      ::= "qufunct" Ident arglist body;
ExternOpDef           def      ::= "extern" "operator" Ident arglist ";";
ExternQufunctDef      def      ::= "extern" "qufunct" Ident  arglist ";";