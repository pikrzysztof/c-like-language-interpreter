

module Absgramatyka where

-- Haskell module generated by the BNF converter




newtype Ident = Ident String deriving (Eq,Ord,Show,Read)
data Program =
   QCLProgram [Def] [Stmt]
  deriving (Eq,Ord,Show,Read)

data ComplexCoord =
   ComplexCoordInt Integer
 | ComplexCoordDouble Double
  deriving (Eq,Ord,Show,Read)

data Const =
   CJustConst ComplexCoord
 | CConstComplexPair ComplexCoord ComplexCoord
 | CBoolTrue
 | CBoolFalse
 | CString String
  deriving (Eq,Ord,Show,Read)

data Expr =
   Variable Ident               -- zmienna
 | EFCall Ident [Expr]          -- wywolanie funkcji
 | ETableElement Ident [Expr]   -- x[y, x, z]
 | EListaOdDo Ident Expr Expr   -- x[a:b]
 | ELiczbaElementowListy Ident Expr Expr -- x[z::y]
 | ETrzecieListy Ident Expr Expr         -- x[z..y]
 | EListyBez Ident Expr Expr             -- x[z\y]
 | EConst Const                          -- const
 | EEq Expr Expr                         -- x == z
 | ENeq Expr Expr                        -- x != z
 | ELe Expr Expr                         -- x < y
 | ELEq Expr Expr                        -- x <= y
 | EGr Expr Expr                         -- x > y
 | EGrEq Expr Expr                       -- x >= y
 | EOr Expr Expr                         -- x or y
 | EAnd Expr Expr                        -- x and y
 | EXor Expr Expr                        -- x xor y
 | ENot Expr                             -- not y
 | EAdd Expr Expr                        -- x + y
 | ESubtract Expr Expr                   -- x - y
 | EStringConcat Expr Expr               -- x & y
 | ETimes Expr Expr                      -- x * y
 | EDiv Expr Expr                        -- x / y
 | EMod Expr Expr                        -- x mod y
 | EPow Expr Expr                        -- x ^ y
 | EUnaryMinus Expr                      -- -x
 | ESize Expr                            -- #x
  deriving (Eq,Ord,Show,Read)

data Option =
   JustOption Ident             -- opcja jakas, identyfikator
  deriving (Eq,Ord,Show,Read)

data Stmt =
   UnitaryOpInvCall Ident [Expr] -- !f(args)
 | Expression Expr               -- expr;
 | Assignment Expr Expr          -- x = y
 | FanoutSugar Expr FanoutSugarOp Expr -- x <- y albo x -> y albo x <-> y
 | ForLoop Ident Expr Expr Block       -- for i = 0 to 5 {costam}
 | ForStepLoop Ident Expr Expr Expr Block -- for i = 0 to 5 step 3 {costam}
 | WhileLoop Expr Block                   -- while (expr) {costam}
 | UntilLoop Block Expr                   -- {costam} until (expr)
 | ConditionalBranch Expr Block           -- if expr then {costam}
 | ConditionalBranchElse Expr Block Block -- if expr then {costam} else {cos2}
 | ReturnExpr Expr                        -- return x;
 | InputExpr Expr Ident                   -- input expr ident
 | InputNoExpr Ident                      -- input ident
 | Print [Expr]                           -- print [expr]
 | Exit Expr                              -- exit expr
 | MeasureNoIdent Expr                    -- measure expr
 | MeasureIdent Expr Ident                -- measure expr, ident
 | Reset                                  -- reset
 | List [Ident]                           -- list [ident]
 | DumpExpr Expr                          -- dump expr
 | DumpNoExpr                             -- dump
 | LoadExpr Expr                          -- load expr
 | LoadNoExpr                             -- load
 | SaveExpr Expr                          -- save expr
 | SaveNoExpr                             -- save
 | Shell                                  -- shhell
 | SetExpr Option Expr                    -- set option expr
 | Semicolon                              -- ;
  deriving (Eq,Ord,Show,Read)

data FanoutSugarOp =
   FanoutRight                  -- <-
 | FanoutLeft                   -- ->
 | FanoutSwap                   -- <->
  deriving (Eq,Ord,Show,Read)

data Type =
   SimpleType ST                -- zwykly typ
 | Vector ST                    -- wektor
 | Matrix ST                    -- macierz
 | Tensor ST Integer            -- tensor rzedu int
  deriving (Eq,Ord,Show,Read)

data ST =
   TString
 | TBoolean
 | TInt
 | TReal
 | TComplex
 | TQureg
 | TQuvoid
 | TQuConst
 | TQuscratch
 | TQucond
  deriving (Eq,Ord,Show,Read)

data ConstDef =
   ClassicalConstDef Ident Expr
 | QuantumConstDef Type Ident
  deriving (Eq,Ord,Show,Read)

data VarDef =
   JustVarDef Type Ident
 | VarDefAss Type Ident Expr
 | VarDefTable Type Ident Expr
  deriving (Eq,Ord,Show,Read)

data ArgDef =
   JustArgDef Type Ident
  deriving (Eq,Ord,Show,Read)

data ConstOrVar =
   ConstDefListItem ConstDef
 | VarDefListItem VarDef
  deriving (Eq,Ord,Show,Read)

data Body =
   JustBody [ConstOrVar] [Stmt]
  deriving (Eq,Ord,Show,Read)

data Def =
   DefConstDef ConstDef
 | VarDefDef VarDef
 | FunDef Type Ident [ArgDef] Body
 | ProcDef Ident [ArgDef] Body
 | OperatorDef Ident [ArgDef] Body
 | QufunctOperatorDef Ident [ArgDef] Body
 | CondOperatorDef Ident [ArgDef] Body
 | QufunctDef Ident [ArgDef] Body
 | CondQufunctDef Ident [ArgDef] Body
 | ExternOpDef Ident [ArgDef]
 | ExternQufunctDef Ident [ArgDef]
 | ExternCondOpDef Ident [ArgDef]
 | ExternCondQufunctDef Ident [ArgDef]
  deriving (Eq,Ord,Show,Read)

data Block =
   JustBlock [Stmt]
  deriving (Eq,Ord,Show,Read)
